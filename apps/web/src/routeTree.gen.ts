/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkbenchRouteImport } from './routes/workbench'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkbenchIndexRouteImport } from './routes/workbench.index'
import { Route as WorkbenchNodeIdRouteImport } from './routes/workbench.node.$id'
import { Route as WorkbenchFsSplatFsRouteImport } from './routes/workbench.fs.$...fs'

const WorkbenchRoute = WorkbenchRouteImport.update({
  id: '/workbench',
  path: '/workbench',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkbenchIndexRoute = WorkbenchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkbenchRoute,
} as any)
const WorkbenchNodeIdRoute = WorkbenchNodeIdRouteImport.update({
  id: '/node/$id',
  path: '/node/$id',
  getParentRoute: () => WorkbenchRoute,
} as any)
const WorkbenchFsSplatFsRoute = WorkbenchFsSplatFsRouteImport.update({
  id: '/fs/$/fs',
  path: '/fs/$/fs',
  getParentRoute: () => WorkbenchRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/workbench': typeof WorkbenchRouteWithChildren
  '/workbench/': typeof WorkbenchIndexRoute
  '/workbench/node/$id': typeof WorkbenchNodeIdRoute
  '/workbench/fs/$/fs': typeof WorkbenchFsSplatFsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/workbench': typeof WorkbenchIndexRoute
  '/workbench/node/$id': typeof WorkbenchNodeIdRoute
  '/workbench/fs/$/fs': typeof WorkbenchFsSplatFsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/workbench': typeof WorkbenchRouteWithChildren
  '/workbench/': typeof WorkbenchIndexRoute
  '/workbench/node/$id': typeof WorkbenchNodeIdRoute
  '/workbench/fs/$/fs': typeof WorkbenchFsSplatFsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/workbench'
    | '/workbench/'
    | '/workbench/node/$id'
    | '/workbench/fs/$/fs'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$' | '/workbench' | '/workbench/node/$id' | '/workbench/fs/$/fs'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/workbench'
    | '/workbench/'
    | '/workbench/node/$id'
    | '/workbench/fs/$/fs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  WorkbenchRoute: typeof WorkbenchRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workbench': {
      id: '/workbench'
      path: '/workbench'
      fullPath: '/workbench'
      preLoaderRoute: typeof WorkbenchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workbench/': {
      id: '/workbench/'
      path: '/'
      fullPath: '/workbench/'
      preLoaderRoute: typeof WorkbenchIndexRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/workbench/node/$id': {
      id: '/workbench/node/$id'
      path: '/node/$id'
      fullPath: '/workbench/node/$id'
      preLoaderRoute: typeof WorkbenchNodeIdRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/workbench/fs/$/fs': {
      id: '/workbench/fs/$/fs'
      path: '/fs/$/fs'
      fullPath: '/workbench/fs/$/fs'
      preLoaderRoute: typeof WorkbenchFsSplatFsRouteImport
      parentRoute: typeof WorkbenchRoute
    }
  }
}

interface WorkbenchRouteChildren {
  WorkbenchIndexRoute: typeof WorkbenchIndexRoute
  WorkbenchNodeIdRoute: typeof WorkbenchNodeIdRoute
  WorkbenchFsSplatFsRoute: typeof WorkbenchFsSplatFsRoute
}

const WorkbenchRouteChildren: WorkbenchRouteChildren = {
  WorkbenchIndexRoute: WorkbenchIndexRoute,
  WorkbenchNodeIdRoute: WorkbenchNodeIdRoute,
  WorkbenchFsSplatFsRoute: WorkbenchFsSplatFsRoute,
}

const WorkbenchRouteWithChildren = WorkbenchRoute._addFileChildren(
  WorkbenchRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  WorkbenchRoute: WorkbenchRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
