{"transform_id": "tf:grind", "name": "grind (to paste / powder)", "description": "Mechanical comminution of kernels/seeds into a paste or fine particulate (e.g., production of smooth peanut butter, almond butter, tahini, or ground spices). This transform produces identity-bearing products when applied to nuts/seeds that become consumer foods distinct from the whole kernel/seed (e.g., peanut -> peanut butter).", "identity_bearing": true, "typical_parameters": {"final_texture": ["paste", "fine_powder", "coarse"], "added_oil": ["none", "adjunct_oil_percent"], "temperature": "ambient_to_warm"}, "applies_to": [{"taxon_examples": ["tx:p:arachis:hypogaea"], "part": "part:kernel", "notes": "Primary target for peanut butter production."}, {"taxon_examples": ["tx:p:prunus:amygdalus", "tx:p:juglans:regia", "tx:p:sesamum:indicum"], "part": "part:kernel|part:seed", "notes": "Covers almond butter, walnut pastes, tahini, etc."}], "nutritional_rationale": "Grinding kernels/seeds into a paste/powder creates a new food identity (e.g., 'peanut butter') that is treated as a distinct product in food composition/labeling databases. While gross macronutrients per 100 g are largely conserved, processing can change fat availability, particle-surface oil release, water activity, and may permit addition of stabilizers or oils. A dedicated transform enables clear provenance (ingredient -> product), consistent application across taxa, and precise handling of any transform-specific nutrient adjustments or additional ingredients.", "examples": [{"input": "tx:p:arachis:hypogaea (part:kernel)", "operation": "tf:grind -> paste (smooth peanut butter)"}, {"input": "tx:p:sesamum:indicum (part:seed)", "operation": "tf:grind -> tahini"}]}
{"summary": "Relax tf:roast/tf:grind ordering constraints and add substrate metadata so roasting can validly precede grinding (kernel -> paste) or follow it when appropriate.", "details": [{"change": "tf:roast applicability metadata", "proposal": "Annotate tf:roast to accept substrate types ['kernel','paste'] and an optional 'substrate' param indicating whether the transform is applied to whole kernels or to a ground paste. This documents that roasting whole kernels (common commercial workflow) is distinct from roasting a paste and has different effects."}, {"change": "tf:grind metadata", "proposal": "Clarify tf:grind 'fineness' param semantics and substrate transitions (e.g., substrate 'kernel' -> 'paste' when fineness='smooth')."}, {"change": "ordering / precedence rules", "proposal": "Remove or relax a hard-coded global precedence that forces tf:grind before tf:roast. Instead, enforce transform preconditions via substrate compatibility (i.e., allow roast before grind when substrate='kernel')."}, {"rationale": "Roasting before grinding (roasting whole kernels) is common and identity-bearing (chemical and flavor changes). The ontology should allow both sequencing variants by expressing substrate-specific applicability rather than a single fixed ordering."}]}
{"summary": "Add a small set of identity-bearing, olive/fruit oil production transforms (crushing, malaxation, and phase-separation/centrifugation) to capture steps that define extra-virgin classification and are relevant across fruit-based oil production.", "new_transforms": [{"id": "tf:crush", "short_description": "Mechanical crushing/milling of fruit (olive) to produce a paste, rupturing mesocarp cells and releasing oil droplets.", "rationale": "Crushing is an identity-bearing step for fruit oils: it creates a paste whose properties (particle size, cell rupture) affect yield, chemistry, and downstream steps. Useful for classifying unrefined/virgin oils.", "suggested_params": {"substrate": "part:fruit:olive", "outcome": "part:paste:olive", "intensity": "coarse|fine"}, "applicability": "fruit oils (olive, possibly others like some nut/fruit oil workflows)"}, {"id": "tf:malax", "short_description": "Slow mechanical mixing (malaxation) of olive paste to coalesce oil droplets and modify chemical/organoleptic properties.", "rationale": "Malaxation is a distinct, identity-bearing step that affects oil chemistry (phenolics, volatile profile) and is central to extra-virgin classification. It is not captured by generic tf:press.", "suggested_params": {"substrate": "part:paste:olive", "temperature_c": "numeric (°C)", "time_min": "numeric", "oxygen_exposure": "low|ambient|inert"}, "applicability": "olive oil production; relevant for quality-classification and compositional outcomes"}, {"id": "tf:centrifuge", "short_description": "Centrifugal separation / phase separation to separate oil from water and solids in olive paste or pressed mass.", "rationale": "Phase separation by centrifugation is a mechanical, identity-bearing separation step that replaces or complements simple pressing and filtration; it affects oil purity and classification (virgin/extra-virgin).", "suggested_params": {"substrate": "part:paste:olive|part:press_cake:olive", "g_force": "numeric", "mode": "two_phase|three_phase", "outcomes": {"oil": "part:oil:virgin", "vegetation_water": "part:water:vegetation", "pomace": "part:residue:olive"}}, "applicability": "olive and other fruit oil extraction workflows where centrifugation/phase separation is used"}], "notes": ["tf:press remains the correct existing transform to represent mechanical expression; corrected_tpt uses tf:press to complete the immediate TPT.", "The proposed transforms are identity-bearing rather than merely mechanical size reductions, and they materially affect classification (extra-virgin) and compositional/organoleptic endpoints — therefore an ontology overlay is justified.", "These transforms should be defined generically enough to apply to multiple fruit oil workflows (not only olive) where appropriate."]}
{"summary": "Add identity-bearing transforms for dehulling and oil extraction/defatting for oilseeds (soy).", "proposed_transforms": [{"id": "tf:dehull", "params": {"method": "mechanical", "note": "removes seed coat/hull; materially alters fiber/mineral content and should be modeled for dehulled products"}}, {"id": "tf:oil_extraction_defatting", "params": {"method": "solvent", "solvent": "hexane", "note": "industrial solvent extraction is a common route. include alternatives (mechanical/pressing, aqueous) and a parameter for extraction severity/efficiency."}}], "proposed_parts": [{"id": "part:flour:soy:defatted:dehulled", "description": "Explicit part representing soy flour produced from dehulled, defatted soy seed — useful where dehulling materially changes composition."}], "rationale": "Oil extraction/defatting is identity-bearing and materially changes macronutrient profile (removes fat, concentrates protein/carbohydrate) so it must be represented as a transform. Dehulling removes hull material and can change fiber/mineral contents; for accurate nutrient modeling of dehulled vs whole-seed flours, a tf:dehull transform or dehulled part is warranted. Propose solvent, mechanical press, and aqueous variants for oil extraction with parameters for extraction efficiency."}
{"summary": "Add oil-extraction and refining transforms/parts to represent identity-bearing changes from seed -> oil (mechanical expeller pressing, solvent extraction, and subsequent refinement).", "new_transforms": [{"id": "tf:press", "params_schema": {"method": ["expeller", "screw_press", "hydraulic_press"], "substrate": "part identifier (e.g., part:seed:kernel)", "pressure_kPa": "optional numeric", "temperature_C": "optional numeric"}, "description": "Mechanical expression/pressing to separate lipid phase (virgin/expressed oil) from seed/kernel. Identity-bearing: concentrates lipids and removes non-lipid solids; affects nutrient composition of resulting oil and press cake."}, {"id": "tf:solvent_extract", "params_schema": {"solvent": ["hexane", "ethanol", "other"], "substrate": "part identifier (e.g., part:seed:kernel)", "temperature_C": "optional numeric", "residual_solvent": "optional descriptor (e.g., 'trace','none')"}, "description": "Solvent-based extraction of oil from seed/kernel. Identity-bearing and distinct from mechanical pressing in yield, residual solvent, and starting impurities; produces crude oil requiring refinement for many commercial products."}, {"id": "tf:refine", "params_schema": {"level": ["degummed", "neutralized", "bleached", "deodorized", "fully_refined"], "steps": "optional array of refinement steps in sequence", "substrate": "part identifier (e.g., part:oil:crude)"}, "description": "Refining operations applied to crude oil (degumming, neutralization, bleaching, deodorization). Each step alters composition (removes free fatty acids, phospholipids, pigments, volatile compounds) and therefore matters for nutrient/constituent representation."}], "new_parts": [{"id": "part:oil:crude", "description": "Oil obtained immediately after extraction (mechanical or solvent) before downstream refining. Higher levels of free fatty acids, phospholipids, pigments, and possible solvent residues compared to virgin/refined oils."}, {"id": "part:oil:refined", "description": "Oil after one or more refinement steps (degummed/neutralized/bleached/deodorized). Lower levels of non-triacylglycerol components, suitable as common commercial edible oil."}], "examples_of_use": [{"use_case": "Virgin expeller-pressed peanut oil", "tpt": [{"id": "tf:press", "params": {"method": "expeller", "substrate": "part:seed:kernel"}}], "target_part": "part:oil:virgin"}, {"use_case": "Commercial refined peanut oil (solvent + refine)", "tpt": [{"id": "tf:solvent_extract", "params": {"solvent": "hexane", "substrate": "part:seed:kernel"}}, {"id": "tf:refine", "params": {"level": "fully_refined", "substrate": "part:oil:crude"}}], "target_part": "part:oil:refined"}], "rationale": "Oil extraction and refining are identity-bearing operations that materially change composition and nutritional/constituent profiles (concentration of triacylglycerols, removal of non-lipid constituents, possible solvent residues). Tier 2 could not complete the TPT without these transforms; adding these transforms and the 'crude'/'refined' oil parts will let Tier 2 represent common commercial variations (virgin expeller oil vs solvent-extracted crude that is refined)."}
{"rationale": "Industrial safflower oil is produced by an identity-bearing sequence (seed dehulling → oil extraction → oil refining). These steps materially change nutrient partitioning (concentrating lipids into an oil fraction, leaving protein/carbohydrate in meal) and change compositional details of the oil (free fatty acid content, minor lipid-soluble micronutrients, removal of phospholipids/oxidation products during refining). Because Tier 2 assumed an industrial solvent-extraction + refining pathway but the necessary extraction/refining transforms/parts are not present in the ontology, propose adding them so TPTs can be completed unambiguously.", "proposed_transforms": [{"id": "tf:dehull", "params": {"method": "mechanical", "substrate": "seed", "product_parts": ["part:seed:dehulled", "part:seed:hull"]}, "description": "Remove hulls/outer coverings from oilseed kernels. Identity-bearing for downstream mass balance; does not create oil but changes substrate for extraction and nutrient partitioning."}, {"id": "tf:solvent_extract", "params": {"solvent": "hexane", "substrate": "part:seed:dehulled", "products": ["part:oil:crude", "part:meal:oilseed"], "notes": "Typical industrial counter-current hexane extraction; results in crude oil and defatted meal. Yields and residual solvent should be parametrized elsewhere."}, "description": "Extracts lipid fraction from dehulled seeds using organic solvent. Identity-bearing (creates a distinct oil part with concentrated lipids)."}, {"id": "tf:refine_oil", "params": {"input": "part:oil:crude", "output": "part:oil:refined", "steps": ["degumming", "neutralization", "bleaching", "deodorization"]}, "description": "Refining sequence applied to crude vegetable oil to produce refined oil. Alters minor components (free fatty acids, phospholipids, pigments, volatile compounds) and thus nutritional/compositional profile."}, {"id": "tf:cold_press", "params": {"substrate": "part:seed:dehulled", "output": "part:oil:virgin", "notes": "Mechanical pressing/expeller extraction without solvent; yields 'virgin' oil with different minor component profile."}, "description": "Mechanical oil expression (identity-bearing). Useful as an alternative pathway for 'virgin' safflower oil."}], "proposed_parts": [{"id": "part:seed:dehulled", "description": "Dehulled kernel portion of safflower seed (oil-bearing). Used as substrate for extraction transforms."}, {"id": "part:seed:hull", "description": "Outer hulls/seed coats removed by dehulling (byproduct)."}, {"id": "part:oil:crude", "description": "Crude safflower oil obtained directly from solvent extraction (unrefined)."}, {"id": "part:oil:virgin", "description": "Oil obtained by mechanical pressing (unrefined/virgin) with a different minor-component profile than refined oil."}, {"id": "part:meal:oilseed", "description": "Defatted meal left after solvent extraction (high in protein/carbohydrate), important for mass balance and nutrient partitioning."}], "notes_on_parameters_and_metadata": {"ambiguity_handling": "Because 'Oil, safflower' in input lacks extraction/refinement metadata, the ontology should allow a provenance tag or parameter to indicate extraction method (e.g., solvent vs cold-pressed) and refinement status (crude vs refined). Until such metadata is present, mappings should be marked 'ambiguous' and this overlay used to disambiguate.", "nutritional_significance": "Solvent extraction and refining materially alter which part contains the lipids and the minor-component profile of the oil; therefore these transforms are identity-bearing and necessary for accurate nutrient composition modeling."}}
{"summary": "Add an explicit filtration/solid-separation transform and explicit okara part plus guidance for ordering wet-grind → separation → homogenization → UHT for plant 'milk' products.", "details": {"new_transforms": [{"id": "tf:separate_by_filtration", "purpose": "Explicitly model removal of insoluble solids from a wet-milled slurry (e.g., producing a liquid 'expressed_juice' and a residual solid byproduct like okara).", "suggested_params": {"mesh_size": "e.g. 100-300 microns", "retained_fraction_estimate": "fraction of original dry solids retained in residue", "principal_byproduct_part": "part id for retained solids (e.g., part:okara)"}, "notes": "This makes the nutrition effect of removing fiber/insolubles explicit and avoids ambiguous use/ordering of a generic tf:strain when used after wet grinding."}], "new_parts": [{"id": "part:okara", "purpose": "Residual solids from soy slurry after filtration/straining; important as a separated byproduct that removes fiber/protein from the liquid fraction."}], "ordering_guidance": ["Wet milling of seeds/beans that produce a slurry should be represented with tf:grind (with fineness param indicating slurry/paste).", "A dedicated solid-separation transform (tf:separate_by_filtration or clarified tf:strain usage) should follow tf:grind to produce part:expressed_juice (liquid) and part:okara (solids).", "Homogenization and thermal stabilization (UHT/pasteurize) follow separation when modelling shelf-stable plant milks."], "rationale": "Grinding oilseeds/legumes to a wet slurry and then separating solids materially changes the nutrient distribution between liquid and solid fractions (not just volume/particle-size changes). Making a distinct transform for solid separation (with parameters such as mesh_size or retained_fraction) will allow nutrition models to move insoluble fiber/protein into the okara part and accurately represent the expressed_juice nutrient profile. Currently available generic 'strain' uses/ordering are ambiguous and lead to Tier 2 failures/ambiguous TPTs for many plant-milk products."}}
{"proposed_transforms": [{"id": "tf:reconstitute", "description": "Add solvent (typically water) to a concentrate to return it to a target finished-solids (Brix) or mass-based concentration. This is identity-bearing (changes water content and nutrient density) and necessary to represent 'from concentrate' -> final product transitions.", "recommended_params_schema": {"solvent": "string (e.g., 'water')", "ratio": "number | string — solvent mass per mass concentrate OR a standardized notation (e.g., '3:1')", "target_brix": "number (optional) — target degrees Brix of reconstituted juice", "final_total_solids_pct": "number (optional) — alternative to target_brix", "temperature_C": "number (optional) — temperature during reconstitution", "mixing_method": "string (optional)"}, "notes": "Having tf:reconstitute allows explicit modelling of water addition that materially affects per-100g nutrient values. It should be usable across many concentrated beverages and some reconstituted purees."}], "proposed_parts": [{"id": "part:juice_concentrate", "description": "Concentrated expressed juice (most water removed). Useful as an intermediate substrate for tf:reconstitute and to represent ingredient-level provenance for 'from concentrate' products."}], "rationale": "Reconstitution is identity-bearing and nutritionally significant (it alters water content and nutrient densities). It applies broadly across many foods (fruit juices, some soups, baby foods) so adding a single well-parameterized tf:reconstitute avoids ad-hoc approximations and improves consistency."}
{"summary": "Adjust ordering constraints and enrich tf:grind/tf:strain semantics for seed-derived 'expressed juice' (plant milk) workflows.", "changes_requested": [{"change_type": "ordering", "detail": "Allow tf:strain to validly occur after tf:grind and tf:cook for seed/bean workflows. Current ontology ordering metadata places tf:strain earlier than tf:grind in a way that prevents biologically realistic sequences for seed milks (soy, almond, etc.)."}, {"change_type": "transform_semantics", "detail": "Ensure tf:grind has a 'fineness' parameter (allowed values e.g., 'coarse','fine','slurry') and is flagged as identity-bearing -> identity-changing for seeds/nuts (i.e., creates paste/slurry with different bioavailability)."}, {"change_type": "transform_semantics", "detail": "Enrich tf:strain with explicit params to indicate primary product and co-product (e.g., 'product':'expressed_juice', 'co_product':'okara'), and mark tf:strain as an identity-bearing separation when applied to seed slurries (removes insoluble solids, changes nutrient partitioning)."}, {"change_type": "part_addition", "detail": "Add/ensure part:expressed_juice (and mapping rules) keyed for seed-derived milks. This part should be the canonical part for plant milks produced by slurry + strain workflows (soy milk, almond milk, etc.)."}, {"change_type": "process_template", "detail": "Create a 'seed_milk_production' process template that encodes the common sequence: soak -> grind (slurry) -> cook (optional/heat_treat) -> strain -> formulation (additives sweeteners) -> homogenize -> pasteurize. This will reduce ambiguous constructions and provide a canonical path for Tier 2 to validate against."}], "rationale": "The sequence soak -> grind (slurry) -> cook -> strain -> final treatments is biologically and technologically required for soy milk. Straining is identity-bearing (it produces an expressed juice and an insoluble co-product 'okara'), and grinding seeds into a slurry is identity-bearing in the sense captured by tf:grind with fineness parameter. The current ordering metadata prevents constructing unambiguous, ontology-consistent TPTs for multiple seed-derived milks, so an overlay that relaxes ordering constraints and enriches semantics will benefit many foods."}
{"summary": "Add a plant-based milk derived part and adjust transform ordering/semantics to represent nut/seed grinding, liquid separation, homogenization, and pasteurization for plant milks.", "proposals": [{"type": "part_add", "part_id": "part:milk:plant_based", "description": "A derived part representing liquid extracts from plant seeds/nuts/grains (e.g., almond milk, soy milk). Should be instantiable with a source taxon (e.g., tx:p:prunus:dulcis).", "attributes": {"category": "liquid:beverage", "derived_from": ["seed", "nut", "grain"], "example_instances": ["part:milk:almond", "part:milk:soy"]}}, {"type": "transform_ordering_adjustment", "description": "Allow domain-specific ordering exceptions so tf:grind (nuts/seeds -> slurry) can precede tf:strain (separation) for plant-milk workflows. Current numeric ordering places tf:strain earlier; add rule permitting grind -> strain for plant-derived milks.", "rationale": "Real-world sequence for plant milks is soak -> grind -> strain -> homogenize -> pasteurize."}, {"type": "transform_semantics_clarification", "items": [{"transform_id": "tf:grind", "clarification": "For nuts/seeds, tf:grind is identity-bearing but nutritionally consequential (changes particle size, releases oils and soluble components). Expose 'fineness' param (e.g., paste/slurry vs coarse) and substrate guidance (seed/nut)."}, {"transform_id": "tf:strain", "clarification": "Mark tf:strain as composition-altering for liquid separation steps (removes insoluble solids, reduces fiber and some bound nutrients). Capture params for mesh size/method to allow nutrient mass-balance differences between 'full-extract' vs 'highly-filtered' plant milks."}, {"transform_id": "tf:homogenize", "clarification": "Keep as stabilization transform; include pressure/passes params."}]}, {"type": "mapping_guidance", "description": "Suggest canonical TPT pattern for plant milks: optional tf:soak -> tf:grind (fineness=slurry) -> tf:strain (mesh param) -> tf:homogenize -> tf:pasteurize -> part:milk:plant_based (instantiate specific derived part e.g., part:milk:almond).", "benefit": "Will allow consistent nutrition modeling (e.g., fraction of solids retained in pulp vs liquid) and reuse across multiple plant-based milks."}]}
{"new_transforms": [{"id": "tf:extract_liquid", "params_schema": {"method": {"type": "enum", "values": ["blend", "macerate", "press", "high-shear_blend"]}, "substrate": {"type": "uri", "example": "part:oat:meal or tx:p:avena:sativa"}, "medium": {"type": "string", "example": "water"}, "solid_soluble_target": {"type": "enum", "values": ["aqueous_soluble_fraction", "colloidal_suspension"]}, "yield_pct_solids": {"type": "number", "units": "%", "description": "expected percent solids in extract"}, "fineness_or_blend_setting": {"type": "string", "description": "e.g., rpm or blade setting for blender"}}, "rationale": "Oat milk is an identity-bearing liquid extract produced by mechanical disruption (blending/maceration/pressing) of milled/soaked oats followed by separation of solids. This step changes the product's identity and the partitioning of nutrients (water-soluble carbohydrates, soluble fiber, protein dispersion, and lipid emulsions) relative to intact or merely milled oats, so it must be represented as a distinct transform to reliably model nutrient composition and yields."}], "suggested_ordering_note": "tf:extract_liquid should be applied after tf:mill and tf:soak (to maximize soluble extraction) and immediately before tf:strain/tf:filter. Pasteurization and homogenization follow extraction/separation in typical commercial flows."}
{"summary": "Add/extend a grinding/milling transform to cover tuber-to-flour conversions (dried tuber -> flour).", "rationale": "Converting dried potato (a tuber) into a fine flour is an identity-bearing operation: it creates a new particulate product (flour) with different physical form and likely altered functional properties and nutrient bioavailability compared with intact/dried pieces. Existing transforms (tf:mill limited to Poaceae; tf:grind limited to seeds/kernels) do not represent this operation. Multiple non-grain tuber products (potato flour, cassava/manioc flour, yam flour, sweet potato flour) would benefit from one generic, reusable transform.", "proposal": {"option_1_preferred": {"action": "extend", "transform_id": "tf:grind", "change": "Broaden allowable substrate scope to include root/tuber parts (part:tuber) and to accept non-seed botanical taxa.", "new_params": {"fineness_mesh": {"type": "integer", "description": "Target mesh size (e.g., 60, 80, 100) to indicate particle fineness for flour-grade products."}, "method": {"type": "string", "description": "Milling method (e.g., hammer_mill, roller_mill, stone_mill)."}, "precondition": {"type": "string", "description": "Expected substrate state (e.g., 'dried', 'parboiled_dried')"}}, "semantics": "tf:grind(dried tuber) -> part:flour; identity-bearing: produces a distinct flour part from tuber substrate."}, "option_2_alternative": {"action": "add_new", "transform_id": "tf:mill_tuber", "description": "A new transform specifically for milling dried root/tuber substrates into flour. Parameters similar to extended tf:grind (fineness_mesh, method, precondition).", "note": "Use this only if maintainers prefer separate semantics for tuber milling vs seed grinding."}, "backwards_compatibility": "Ensure that existing tf:grind usages for seeds/kernels remain unchanged; add taxonomy/part applicability metadata to allow matching for tubers.", "benefit": "Covers multiple existing food products (potato flour, cassava flour, sweet potato flour, yam flour, etc.), reduces ambiguity in Tier 2 TPT construction, and allows consistent nutritional modeling for flour particle-size effects where relevant."}}
{"change": "reorder_transform", "transform_id": "tf:roast", "current_order": 70, "proposed_order": 55, "rationale": "Roasting of seeds/nuts is nutritionally and chemically significant (Maillard reactions, moisture loss, antioxidant and lipid oxidation changes) and in common industrial/culinary practice is performed before grinding for products like tahini. The existing ontology order (tf:grind order 57 < tf:roast order 70) prevents representing the common pre-grind roast step. Moving tf:roast to an order between tf:dehull (52) and tf:grind (57) (proposed 55) will allow correct sequencing for sesame and many other seeds/nuts (e.g., peanuts, almonds, sesame) without adding new transforms. Alternatively, allow tf:roast to be flagged as applicable at multiple stages (pre- or post-grind), but the simpler, broadly compatible fix is reordering.", "impact_scope": "affects any seed/nut/spice items where roasting is commonly done prior to size reduction (sesame, peanuts, almonds, sunflower seeds, some spices)."}
{"rationale": "Many cottage cheese products receive a cream or cream-based dressing added to curds after draining. That addition materially changes fat and energy content per 100 g and is therefore identity-bearing and nutritionally significant. The current transform set lacks a standard way to represent addition/enrichment/dressing steps for dairy curds; adding a dedicated transform would allow accurate capture of full‑fat cottage cheese variants.", "proposed_transforms": [{"id": "tf:add_dressing", "params_schema": {"ingredient": "string (e.g., 'cream', 'cream_dressing')", "amount_g_per_100g_product": "number", "fat_percent_of_added_ingredient": "number (optional)", "method": "string (optional, e.g., 'fold_in', 'mix')"}, "description": "Represents addition of a liquid/semiliquid dressing (cream, cream-based dressing, milkfat emulsion) to curds after draining. Captures amount and composition so nutrient profile can be adjusted."}, {"id": "part:curd_with_dressing", "description": "A part representing curd pieces after incorporation of a cream/cream-dressing (useful for full-fat cottage cheese products)."}], "examples_of_use": [{"apply_to": "cottage cheese, full fat", "example_transform": {"id": "tf:add_dressing", "params": {"ingredient": "cream", "amount_g_per_100g_product": 20, "fat_percent_of_added_ingredient": 36}}}]}
{"new_transforms": [{"id": "tf:peel", "label": "peel / skin removal", "category": "preparation", "description": "Removal of the external skin/peel layer from a plant part (e.g., potato, apple, carrot). This is a preparation-stage transform that removes the epidermal/periderm layer and any adherent peel. It can change nutrient composition (removal of fibre, some micronutrients, and phytochemicals concentrated in the skin) and mass yield.", "order_range": [10, 30], "params_schema": {"method": {"type": "string", "enum": ["peeler", "knife", "boil-blanch-peel", "steam-peel", "other"], "description": "Tool or technique used to remove skin."}, "completeness": {"type": "string", "enum": ["complete", "partial"], "description": "Whether all skin was removed or partially left (e.g., decorative peel)."}, "target_layer": {"type": "string", "enum": ["skin", "peel", "epidermis", "periderm"], "description": "The anatomical layer removed."}}, "applies_to_taxa_or_parts": ["part:tuber", "part:root", "part:fruit", "part:vegetable_peelable"], "nutritional_effects_note": "Peeling typically reduces insoluble fibre and may reduce certain micronutrients (e.g., some potassium, iron, vitamin C, polyphenols) that are concentrated in or near the skin. The magnitude varies by commodity (e.g., potato skins are a non-trivial source of fibre and some minerals). Implementations should apply commodity-specific yield and nutrient adjustments when this transform is present.", "examples_of_use": [{"food": "Potatoes, russet, without skin, raw", "params": {"method": "peeler", "completeness": "complete", "target_layer": "skin"}}, {"food": "Apples, peeled", "params": {"method": "peeler", "completeness": "complete", "target_layer": "skin"}}], "rationale": "Peeling is a common, cross-cutting preparation step that can materially change nutrient composition for multiple foods; adding a well-specified tf:peel enables consistent handling of 'without skin/peeled' labels across the ontology."}]}
{"transforms": [{"id": "tf:peel", "params": {"action": "remove_skin", "removed_component": "skin/peel", "typical_order": [10, 30], "typical_tools": ["peeler", "knife"], "notes": "Peeling removes the outer periderm/skin layer; not purely cosmetic — alters mass and removes skin-concentrated fiber and micronutrients."}}], "parts": [{"id": "part:tuber:peeled", "derived_from": "part:tuber", "label": "tuber (peeled)", "description": "Tuber tissue after removal of the outer skin/peel (i.e., peeled potato). Used to represent products specified as 'without skin' or 'peeled'.", "expected_nutritional_consequences": "Lower total mass, reduced insoluble fiber and reduced skin-localized micronutrients/phytonutrients (examples: some vitamin C, potassium, polyphenols)."}], "rationale": "Peeling potatoes removes the skin layer which concentrates fiber and some micronutrients/phytonutrients; this materially affects composition and yield and should be representable. Adding a canonical tf:peel transform plus a derived peeled-tuber part will allow exact representation of 'potato, without skin' and similar peeled tuber products."}
{"new_transforms": [{"id": "tf:peel", "description": "Remove outer skin/peel from a food part (e.g., peel potato, apple, carrot). This transform represents removal of a distinct tissue layer and the associated mass and nutrient fraction. It is not a mere size reduction; it deletes a compositional subpart.", "params": {"removed_part": "skin", "method": "peel|pare|scrape", "tool": "peeler|knife|scraper (optional)", "coverage": "whole|partial", "removed_fraction": "proportion (0-1) of original part mass removed (optional; if omitted, ontology should use taxon-specific defaults)"}, "effects_on_nutrition": "Removes the nutrient/mass profile associated with the skin layer. Implementation should subtract the skin's nutrient contribution (using a skin subpart composition or a default removed_fraction) from the original part to produce the peeled material's composition.", "applicability": "Vegetables, tubers, fruits, and any food items with an edible/not-edible outer skin layer. Examples: potatoes (tuber skin), apples (fruit peel), carrots (root skin).", "notes": "Where possible reuse existing part descriptors (e.g., part:skin or a taxon-specific skin subpart). Provide taxon-specific default removed_fraction and nutrient profiles for the removed skin when available; otherwise allow explicit removed_fraction in the transform params.", "examples": [{"input": "part:tuber:potato (raw)", "params": {"removed_part": "skin", "coverage": "whole"}, "output_note": "potato flesh without skin"}, {"input": "part:fruit:apple (raw)", "params": {"removed_part": "skin", "coverage": "whole"}, "output_note": "apple without peel"}]}], "recommended_taxon_defaults": {"tx:p:solanum:tuberosum": {"default_removed_fraction": 0.03, "rationale": "Potato skin is thin; typical peeled mass loss ~2–5%. Taxon-specific studies can refine this."}, "placeholder_guidance": "Supply taxon-specific default fractions and skin composition entries to make tf:peel operational across foods."}}
{"proposal_type": "add_or_extend_transform", "target": "tf:mill (tuber-support)", "summary": "Introduce support for tuber pulverization/milling to produce flour from tuber tissue (e.g., cassava, potato, yam).", "details": {"options": [{"option_id": "extend_tf:mill", "description": "Extend existing tf:mill (currently grain-focused) to accept substrate types 'tuber_tissue' and 'root_tissue' in addition to grains.", "params": {"substrate": "tuber_tissue | root_tissue | grain_kernel", "fineness": "coarse|medium|fine", "method": "hammermill|stone|roller|attrition", "output_part": "part:flour (or part:meal depending on fineness)"}, "rationale": "Re-uses existing milling semantics and avoids creating near-duplicate transforms; produces identity-bearing change (tuber -> flour)."}, {"option_id": "add_tf:mill_tuber", "description": "Add a new transform tf:mill_tuber specifically for pulverizing tuber/root tissue into flour.", "params": {"substrate": "tuber_tissue", "fineness": "coarse|medium|fine", "method": "hammermill|stone|roller|attrition", "output_part": "part:flour"}, "rationale": "Clear, explicit transform for tuber-to-flour processing; useful if maintainers prefer distinct transform semantics for tubers vs grains."}], "recommended_output": "part:flour:cassava (created by the milling transform with fineness='fine')", "scope_and_impact": "Applies to multiple foods (cassava, potato, yam, taro). This is identity-bearing: produces a new part (flour) with distinct functional and nutritional properties (particle size, starch accessibility, hydration behavior). Adding/allowing such a transform will resolve multiple Tier 2 failures where tuber comminution is required."}}
{"summary": "Add/standardize dehulling and a hulled-seed (groat) part for pseudocereals such as buckwheat.", "details": {"transforms_to_add_or_standardize": [{"id": "tf:dehull", "description": "Identity-bearing transform removing inedible hull from seeds/pseudocereals. Should be used for non-Poaceae seeds (e.g., buckwheat, quinoa) where hull removal changes nutrient fractions (not merely particle size). Recommended params: {target: 'hull', method: <mechanical|abrasion|polishing>, product: <hulled_groat|dehulled_seed>}.", "rationale": "Dehulling removes a substantial, compositionally distinct hull fraction (high insoluble fiber, tannins, minerals bound in hull). Nutrient profile of hulled product differs from whole intact seed; modeling should reflect that."}], "parts_to_add_or_refine": [{"id": "part:seed:groat", "description": "Dehulled seed product (groat) for pseudocereals and certain grains where hull is removed. Use as the canonical part for hulled buckwheat products.", "rationale": "Avoids using Poaceae-specific part:grain and provides a clear part representing the common commercial form 'hulled groat' of buckwheat."}], "mapping_guidance": "When a product label or data source states 'buckwheat, whole grain' but refers to commercially available buckwheat (commonly hulled groats), apply tf:dehull -> part:seed:groat. If source explicitly includes hulls or whole intact seeds, model as part:seed with no dehull. Document uncertainty when source is ambiguous.", "impact": "Multiple foods (buckwheat, quinoa, amaranth, other pseudocereals/seed crops) would benefit from this transform and part, improving nutrient accuracy where hull removal is practiced."}}
{"proposal_summary": "Add a 'phase' (or 'when') parameter to tf:strain to allow explicit post-open/post-cook use, and document canonical-order override for consumer rinsing of canned goods.", "details": {"change": "Extend existing transform tf:strain with an optional parameter 'phase' (enum: 'pre_cook'|'post_cook'|'post_open') and allow the transform to be applied even when its canonical ordering is earlier, when phase='post_open'/'post_cook'.", "rationale": "Draining-and-rinsing canned legumes is a common consumer action that materially reduces soluble components (notably sodium). The ontology currently lists tf:strain with a canonical order before thermal canning steps, leading to ambiguity when representing post-opening consumer rinsing. Adding a 'phase' parameter is a small, backwards-compatible change that clarifies intent and allows accurate nutrient implications for many canned foods.", "scope_and_benefit": "This change benefits multiple canned and packaged foods (beans, vegetables, olives, canned meats in brine, etc.) where post-opening rinsing/draining alters nutrient/water-soluble constituent levels. It avoids creating a new transform (keeps semantic reuse) while permitting canonical-order overrides for consumer-phase operations.", "implementation_notes": ["Default behavior: if 'phase' is omitted, retain existing canonical ordering (backwards compatible).", "When phase='post_open' or 'post_cook', allow tf:strain to be placed after thermal and retort transforms in TPT construction.", "Document that 'phase' is recommended whenever tf:strain represents a consumer action that occurs after commercial thermal processing.", "Consider adding an optional numerical parameter for rinse intensity or rinse cycles in a later iteration if needed for high-precision sodium reduction modeling."]}}
{"proposal_summary": "Add a consumer-stage rinse/wash transform to capture post-opening rinsing that reduces soluble components (notably sodium) for canned products.", "proposed_transforms": [{"id": "tf:rinse", "description": "Represents consumer washing/rinsing of a packaged food after opening. This is a post-packaging, post-opening identity-bearing transform that can materially change soluble nutrient content (e.g., sodium), and should be encoded separately from tf:strain (drain).", "suggested_params": {"water_type": "enum (tap/distilled/none)", "rinses": "integer (number of rinses, e.g., 1)", "contact_time_s": "integer (seconds of rinse contact, optional)", "efficiency_profile": "string or id referencing ontology profile that estimates fraction of soluble nutrient removal (e.g., 'rinse_low','rinse_med','rinse_high')"}, "notes": "Ontology should include default nutrient-removal profiles (or factors) for common rinse scenarios (e.g., single tap rinse) so downstream nutrient calculations reflect sodium reduction. This transform must be allowed at consumer/post-opening stage and ordered after tf:can and tf:strain (drain)."}], "rationale": "The label 'drained and rinsed' indicates a consumer post-opening action that can materially reduce sodium (and other soluble nutrients). The existing tf:strain (drain) may represent factory draining or earlier pipeline steps but does not capture the effect of an intentional consumer rinse. Because rinsing is identity-bearing with nutritional effects that apply across many canned products (beans, vegetables, etc.), adding tf:rinse is warranted so Tier 2 pipelines can represent and quantify sodium reduction rather than leaving the TPT ambiguous.", "benefit_scope": "Would apply to canned beans, canned vegetables, and other canned/brined products where consumers commonly rinse after draining. Enables consistent handling of sodium adjustments and other soluble-nutrient changes across foods.", "implementation_suggestions": ["Add tf:rinse to transform vocabulary with the suggested params and link to nutrient-removal profiles.", "Add metadata/constraints to allow tf:rinse to be used in consumer-stage transforms and enforce ordering after tf:can and tf:strain where applicable.", "Provide default nutrient-removal factors (with provenance) for common rinse scenarios (e.g., '1x tap rinse' ~ estimate % sodium removed) and allow override by specific rinse params if measured data are available."]}
{"description": "Add a consumer post-open drain-and-rinse transform and an explicit packing-solution part to capture the nutritional effect of draining/rinsing canned products with soluble packing media (salt, sugar).", "proposed_new_transforms": [{"id": "tf:post_open_drain_and_rinse", "summary": "Consumer-level drain and rinse performed after opening a packaged/retort product; removes a fraction of water-soluble components that were present in the packing solution (e.g., Na+, soluble sugars).", "params": {"method": "string (e.g., 'drain_only'|'drain_and_rinse')", "rinse_volume_per_100g": "float (mL) optional", "num_rinses": "int optional", "rinse_efficiency": "float 0-1 optional (fraction of soluble solute removed per rinse)", "actor": "string (e.g., 'consumer')", "order": "string (should be constrained to post-open/post-pack)"}, "nutritional_effects": "Parameterizable removal of water-soluble nutrients (sodium, soluble sugars, water-soluble vitamins) from the food's edible solids; model should apply removal to solute mass in the packing solution and to solute adhering to solids according to 'rinse_efficiency' and 'num_rinses'."}], "proposed_new_parts": [{"id": "part:packing_solution:brine", "summary": "A part representing the packing medium (brine/packing solution) used in canned foods, including solute composition and concentrations.", "attributes": {"solutes": "list (e.g., ['NaCl','sugar'])", "solvent": "string (e.g., 'water')", "solute_concentration": "map (solute -> g per 100 mL or similar)", "volume_per_unit": "float (mL per 100 g or per can) optional"}, "rationale": "Makes it explicit where added sodium/sugar reside and allows a post-open consumer rinse transform to remove a fraction of those added solutes."}], "reason_for_proposal": "The consumer action 'drained and rinsed' materially changes the nutrient content of the edible portion of canned beans by removing packing-solution-borne soluble sodium and sugars. The current ontology lacks a post-retort/post-open consumer rinsing/draining transform and an explicit packing-solution part to represent those soluble additions. Adding these will allow accurate, parameterized reduction of soluble nutrients when 'drained and rinsed' is specified.", "suggested_default_parameters_and_guidance": {"default_num_rinses": 1, "default_rinse_efficiency_per_rinse": 0.5, "guidance": "Allow dataset-specific override of rates; empirical studies indicate large variability in sodium removal depending on drain-only versus drain+rinse, and rinse volume/technique — therefore make parameters optional but available."}}
{"id": "tf:rinse", "summary": "Rinse (wash) with potable water to remove soluble components from drained canned goods", "params_schema": {"water_volume": "volume (mL) or 'typical' if unknown", "water_temperature": "Celsius (optional)", "method": "e.g., 'tap', 'running_tap', 'immersion', 'spray' (optional)", "duration": "seconds (optional)", "repeats": "integer (optional)"}, "intended_effects": {"nutrient_changes": "reduces soluble, surface-associated nutrients and salts (notably sodium) present in residual packing liquid; magnitude depends on params", "identity": "identity-bearing for nutrient composition (changes concentrations of soluble components) but not for botanical identity"}, "modelling_guidance": "Model rinse as a probabilistic or parametric removal of soluble fraction from immediately prior packing/packing_liquid transform (e.g., % sodium removal as function of water_volume, method, repeats). Provide default reduction factors (e.g., single short rinse with running tap ~25–40% reduction in measured canned-sodium; immersion with agitation and larger volume greater reduction).", "justification": "‘Rinsed’ materially affects nutrient composition for canned, salted legumes (notably sodium). Because rinsing removes soluble components, it is nutritionally significant and should be represented as an explicit transform so nutrient estimates reflect common consumer behavior. This transform will benefit many canned vegetables/legumes where rinsing is used.", "examples_of_use": ["Blackeye pea, canned, sodium added, drained and rinsed -> tf:brine -> tf:can -> tf:strain -> tf:rinse", "Canned beans, drained and rinsed -> same sequence"]}
{"issue": "tf:trim currently requires a numeric lean_pct parameter that cannot be reliably inferred from labels like 'boneless, skinless'. This blocks completing TPTs for many common ingredient descriptions.", "proposed_change": {"transform_id": "tf:trim", "proposal": "Make lean_pct optional and add a categorical parameter to represent the specific removed parts when those are explicitly listed on the label.", "example_new_params_schema": {"removed_parts": {"type": "array", "items": "part_id", "description": "List of anatomical parts removed (e.g., ['part:skin','part:bone']). When provided, lean_pct may be omitted."}, "lean_pct": {"type": "number", "description": "Optional percent lean remaining after trimming. If omitted and removed_parts is provided, implementations may use default composition adjustments or lookup tables.", "optional": true}}, "rationale": "Labels commonly specify 'boneless' and/or 'skinless'. These indicate specific removed parts that have predictable, material effects on composition (skin removal reduces fat substantially). Requiring a numeric lean_pct forces unreliable inference or blocks mapping. Allowing removed_parts preserves nutritional specificity (which parts were removed) without inventing arbitrary lean_pct values."}, "alternative_options_considered": [{"option": "Add distinct transforms tf:remove_skin and tf:debone", "pros": "Explicit actions for common removes; clear semantics.", "cons": "Proliferates transforms; duplicates semantics already covered by tf:trim."}, {"option": "Keep tf:trim unchanged and require lean_pct", "pros": "No ontology change.", "cons": "Unworkable for common labels; forces Tier 2 to guess numeric values or mark ambiguous."}]}
{"proposal_summary": "Add explicit debone and skin_removal transforms and a derived part for boneless skinless thigh to remove the need for inferred lean_pct and to capture yield/nutrient changes more precisely.", "new_transforms": [{"id": "tf:debone", "purpose": "Remove bone from an anatomical meat part, adjusting mass and nutrient composition by removing bone fraction and concentrating remaining tissues.", "inputs": ["part:<animal>:<anatomical_part>"], "outputs": ["part:<animal>:<anatomical_part>:deboned"], "params": {"bone_pct": {"type": "float", "description": "fraction of input mass that is bone (0-1); if unknown, a default per-part value is used"}, "yield_pct": {"type": "float", "description": "output mass / input mass after deboning (0-1). Optional; if provided overrides bone_pct-based calculation."}}, "nutritional_effect": "Removes nutrients associated with bone (primarily mineral mass) and increases per-gram concentrations of remaining tissues; should update weights and micronutrient distribution accordingly."}, {"id": "tf:skin_removal", "purpose": "Remove skin from a meat part, adjusting mass and nutrient composition by removing skin-associated fat and other components.", "inputs": ["part:<animal>:<anatomical_part>"], "outputs": ["part:<animal>:<anatomical_part>:skinless"], "params": {"skin_pct": {"type": "float", "description": "fraction of input mass that is skin (0-1); if unknown, a default per-part value is used"}, "yield_pct": {"type": "float", "description": "output mass / input mass after skin removal (0-1). Optional; if provided overrides skin_pct-based calculation."}}, "nutritional_effect": "Removes skin-associated lipids and other constituents, lowering fat content and total mass; increases concentration of remaining tissue nutrients per gram."}, {"id": "tf:debone_and_skin_removal", "purpose": "Combined transform to remove both bone and skin in one step when the source is described as 'boneless, skinless'.", "inputs": ["part:<animal>:<anatomical_part>"], "outputs": ["part:<animal>:<anatomical_part>:boneless_skinless"], "params": {"bone_pct": {"type": "float", "description": "fraction of input mass that is bone (0-1)"}, "skin_pct": {"type": "float", "description": "fraction of input mass that is skin (0-1)"}, "yield_pct": {"type": "float", "description": "optional direct yield fraction (0-1)"}}, "nutritional_effect": "Applies bone and skin removal sequentially; yields and nutrient adjustments calculated accordingly."}], "new_parts": [{"id": "part:chicken:thigh:boneless_skinless", "derived_from": "part:chicken:thigh", "description": "Chicken thigh after removal of bone and skin (raw, boneless skinless).", "typical_yield": {"default_yield_pct": 0.75, "notes": "Example default; should be refined with empirical per-cut yields. This complements the transform params."}, "notes": "Having an explicit derived part avoids needing to infer lean_pct and enables precise nutrient/yield mappings."}], "rationale": "Deboning and skin removal materially change mass and nutrient composition (not just volume), and multiple foods/parts would benefit from explicit transforms (chicken, turkey, other poultry and many red meats). Adding these transforms lets mappings be explicit rather than relying on an inferred lean_pct passed to the generic tf:trim."}
{"motivation": "Pasteurized process American singles are produced by an industrial melt/emulsification/blending step that materially changes composition and nutrient bioavailability (moisture, fat dispersion, and added emulsifying salts/other non-milk additives). The current transform set lacks an identity‑bearing industrial processing transform and explicit representation for emulsifying salts/additives and packaging. These are necessary to compute accurate nutrient composition for the finished single.", "proposed_transforms": [{"id": "tf:process_melt_blend", "description": "Industrial melting and controlled emulsification/recombination step used to make processed cheese (melting of natural cheeses, addition of emulsifying salts, controlled heating and shear to create a stable dispersed system).", "params": {"target_matrix": "cheese_melt", "temp_C": {"type": "numeric", "typical_range": [60, 95]}, "hold_time_min": {"type": "numeric", "typical_range": [1, 30]}, "shear_level": {"type": "enum", "values": ["low", "medium", "high"], "notes": "affects particle size and dispersion"}, "emulsifier_additions": {"type": "list", "item_schema": {"emulsifier_part": "part:additive:emulsifier:<type>", "addition_pct_of_final": "number", "function": "string"}}, "salt_addition_pct": "number", "moisture_adjustment_pct": "number"}, "nutritional_effects": "permits addition of emulsifying salts (e.g., sodium citrate/phosphate), water/fat adjustments, and leads to altered fat/water distribution and potential changes in measured available nutrients (sodium increase, moisture/fat redistribution)."}, {"id": "tf:add_ingredient", "description": "Generic ingredient addition transform for non-milk additives (emulsifying salts, stabilizers, preservatives, colorants) that affect composition.", "params": {"ingredient_part": "part:*", "amount_pct_of_final": "number", "stage": {"type": "enum", "values": ["pre-melt", "during-melt", "post-melt"]}}, "nutritional_effects": "Allows explicit accounting of additives (especially sodium‑bearing emulsifiers) in final composition."}, {"id": "tf:package_single", "description": "Packaging transform that optionally adds mass of packaging medium (negligible for nutrient composition) and encodes single-portion cut/packaging parameters.", "params": {"format": {"type": "enum", "values": ["foil_wrapped", "plastic_film", "loaf_cut"]}, "single_size_g": "number"}, "nutritional_effects": "Primarily metadata; included to support per‑unit nutrition and mass accounting."}], "proposed_parts": [{"id": "part:additive:emulsifier:sodium_citrate", "description": "Emulsifying salt commonly used in processed cheese; sodium-bearing additive affecting sodium content and protein/emulsion behavior.", "typical_nutrient_profile": {"sodium_mg_per_g": "number", "other_nutrients": {}}}, {"id": "part:cheese:processed:american_single", "description": "Finished pasteurized process American single — blend of natural cheeses, emulsifying salts, water/cream and other additives, heat-treated and formed into single slices.", "recommended_base_treatment": ["tf:process_melt_blend", "tf:add_ingredient"]}], "implementation_notes": ["tf:process_melt_blend is identity-bearing for processed cheese: it changes the product class (natural cheese -> processed cheese slice) and materially changes nutrient distribution (notably sodium and effective moisture/fat distribution); therefore it should be implemented as a distinct transform with parameters that allow accounting for added emulsifiers and moisture/fat adjustments.", "tf:add_ingredient should be used to represent emulsifying salts and other non-milk additives explicitly; these should be stored as parts (e.g., part:additive:emulsifier:sodium_citrate) so their nutrient contributions are accounted for.", "Where possible, include typical default parameter sets for common industrial formulations (e.g., % emulsifier, typical melt temp/time) to enable Tier 2 to compute nutrients when manufacturer-specific data are not available.", "Packaging (tf:package_single) is optional for nutrient calculations but recommended for accurate per‑unit serving mass accounting."]}
{"transforms": [{"id": "tf:puree", "summary": "Mechanical comminution and partial straining to produce a thick, homogeneous pulp from whole fruit/vegetable tissue (e.g., tomato puree). This changes physical structure, particle size distribution, and can alter nutrient bioavailability and fiber partitioning compared with intact or simply chopped tissue.", "params_spec": {"fineness": {"type": "enum", "values": ["coarse", "medium", "fine"], "description": "degree of comminution/particle size"}, "method": {"type": "enum", "values": ["blend", "press", "mills", "pass_through_plate"], "description": "mechanical method used"}, "strain": {"type": "boolean", "description": "whether the process includes straining/separating large solids or seeds"}, "added_water": {"type": "boolean", "description": "whether water or liquid is added during processing"}}, "rationale": "Pureeing of fruit/vegetables is identity-bearing for many products (tomato puree, apple sauce) and can materially affect texture, soluble vs insoluble fiber distribution, and nutrient availability. A dedicated transform allows consistent representation and downstream nutrient/structural modelling."}], "parts": [{"id": "part:purée", "parent": "part:fruit", "summary": "Thick homogeneous pulp produced by tf:puree; retains fruit solids (not a clear juice/expressed_juice).", "rationale": "Distinguishes thicker comminuted pulp products from expressed juices and intact fruit parts."}]}
{"rationale": "Peeling is an identity-bearing operation for many fruits (including kiwifruit): removal of the peel changes the material composition (removes peel-specific fiber, micronutrients, phytochemicals and mass) and therefore has a meaningful effect on nutrient composition. The ontology lacks an explicit peel-removal transform and a canonical derived part representing fruit flesh. Multiple foods (apple, pear, kiwi, citrus, mango, etc.) would benefit from a reusable peel/peel-removal transform and a derived part for 'fruit flesh'.", "proposed_transforms": [{"id": "tf:remove_peel", "params": {"removed_part": "part:fruit:peel", "result_part": "part:fruit:flesh", "method": "manual_or_mechanical", "notes": "Removes the exocarp/peel layer from the fruit substrate; should adjust mass and nutrient contributions by excluding the removed part. Implementation should allow specifying percent retained or use part-mass lookup."}}], "proposed_parts": [{"id": "part:fruit:flesh", "parent": "part:fruit", "description": "Edible mesocarp/endocarp/fruit flesh remaining after removal of the peel/exocarp. Used to represent 'peeled' fruit items."}, {"id": "part:fruit:peel", "parent": "part:fruit", "description": "Peel/exocarp of fruit. Separable part that can be removed by tf:remove_peel."}], "implementation_notes": ["tf:remove_peel should be implemented as a part-selection/part-removal transform that (a) marks the derived part as part:fruit:flesh, (b) subtracts the nutrient and mass contributions of part:fruit:peel from the substrate, and (c) optionally accepts a parameter for proportion removed if partial peeling is required.", "Provide default part-mass fractions for common fruits (or link to measured values) so nutrient adjustments can be automated when exact mass-loss data is unavailable.", "This transform is distinct from purely mechanical size-reduction transforms (grating, shredding) which are identity-preserving and should not be created for peeling."]}
{"transforms": [{"id": "tf:peel", "purpose": "Represent removal of the outer fruit layers (flavedo/albedo) from the edible fleshy fruit; changes mass and nutrient composition by excluding peel components.", "params_schema": {"method": {"type": "string", "enum": ["manual", "mechanical", "chemical"], "description": "How the peel is removed"}, "removed_part": {"type": "string", "description": "Derived part identifier for the removed peel (e.g., part:fruit:peel or part:fruit:flavedo)"}, "retained_part": {"type": "string", "description": "Derived part identifier for the retained edible flesh (e.g., part:fruit:flesh)"}, "yield_fraction": {"type": "number", "description": "Optional average fraction (0-1) of original mass retained after peeling"}}, "notes": "This transform is identity-bearing (nutritionally significant) because peel has distinct composition from flesh. It should be applied to citrus and other fruits where peel removal is relevant for nutrient data."}], "parts": [{"id": "part:fruit:flesh", "label": "fruit flesh (peeled)", "parent": "part:fruit", "description": "The edible mesocarp/endocarp tissue of fruit with peel removed (excludes flavedo/albedo). Useful as target part for peeled citrus and similar fruits."}]}
{"summary": "Add a peel-removal transform and a derived 'fruit flesh' part to represent peeled fruits (e.g., mango pulp).", "proposed_transforms": [{"id": "tf:peel", "params_schema": {"method": "string (e.g. 'knife'|'peeler'|'machine')", "removed_parts": "array of strings (e.g. ['exocarp','flavedo','albedo'])", "intensity": "optional string (e.g. 'light'|'complete')", "note": "use this transform when outer pericarp layers are mechanically removed without cooking or chemical treatment"}, "description": "Mechanical removal of the outer pericarp layers (peel/skin) to yield the edible mesocarp/pulp. Applicability: many fruits (mango, apple, pear, peach, etc.)."}], "proposed_parts": [{"id": "part:fruit:flesh", "definition": "Edible mesocarp (pulp) of a fleshy fruit after removal of outer pericarp layers (exocarp/flavedo and albedo where applicable). Used to represent peeled fruit flesh/pulp.", "derivation_rule": {"from_part": "part:fruit", "via_transform": "tf:peel", "result": "part:fruit:flesh"}}], "rationale": "Peeling commonly changes nutrient composition (reduces fiber, alters phytochemical and micronutrient content concentrated in the peel). This is a cross-cutting, identity-bearing processing step for many fruits and should be represented explicitly so derived parts (peeled fruit flesh) can be mapped to correct nutrient profiles (e.g., 'mango, peeled, raw' vs 'mango, with peel'). Providing a standardized tf:peel and part:fruit:flesh will improve accuracy and reuse across many fruit items.", "examples_of_use": [{"input": {"taxon": "tx:p:mangifera:indica:Tommy Atkins", "part": "part:fruit", "transform": "tf:peel"}, "output_part": "part:fruit:flesh", "note": "Represents 'Mango, Tommy Atkins, peeled, raw' as derived fruit flesh after peel removal."}], "backwards_compatibility_notes": "If implemented, mapping rules should prefer explicit peeled-part entries when available in nutrient datasets. Where peeled/unpeeled nutrient variations are minimal for a specific taxon, mappings can still fall back to part:fruit without tf:peel; the new transform/part enables explicit and accurate cases where differences matter."}
{"new_transforms": [{"id": "tf:peel", "stage": "preparation", "order_hint": {"min": 10, "max": 30}, "params_schema": {"method": {"type": "enum", "values": ["manual", "mechanical", "chemical"], "description": "How the peel was removed"}, "substrate": {"type": "part_id", "description": "The biological part being peeled (e.g., part:fruit)"}, "derived_part_retained": {"type": "part_id", "description": "Identifier for the retained edible portion (e.g., part:fruit:pulp)"}, "derived_part_removed": {"type": "part_id", "description": "Identifier for the removed material (e.g., part:fruit:peel)"}, "notes": {"type": "string", "description": "Optional free-text notes (e.g., extent of peel removal)"}}, "description": "Remove outer peel/skin from a fruit or vegetable. Produces a retained edible mesocarp/pulp part and a removed peel part. Nutritionally significant because peel and pulp differ in fiber, micronutrients, and phytochemicals."}], "new_parts": [{"id": "part:fruit:pulp", "parent": "part:fruit", "label": "fruit pulp / mesocarp (retained after peeling)", "description": "The edible mesocarp (pulp) remaining after removal of the outer peel/skin from a fleshy fruit. Intended as the derived retained part produced by tf:peel."}], "rationale_for_overlay": "Peeling is a preparation-stage, identity-bearing transform for many fruits: peel vs pulp have materially different nutrient and phytochemical profiles. The ontology already has part:fruit:peel for the removed material but lacks an explicit retained derived part (pulp/mesocarp) and a peel-transform. Adding tf:peel plus part:fruit:pulp enables unambiguous representation of 'peeled, raw' mango and similar foods."}
{"new_transforms": [{"id": "tf:nixtamalize", "params_schema": {"substrate": "part:kernel:zea:mays", "alkali_agent": "enum: [calcium_hydroxide (slaked lime), wood_ash_alkali, sodium_hydroxide (rare)]", "alkali_concentration_pct": "number (w/w, typical 0.5-2%)", "cook_temperature_C": "number (typical 85-100)", "cook_time_min": "number (typical 20-120)", "soak_time_hr": "number (optional, typical 0-24)", "wash_until_pH": "number (optional, typical 7-9)", "wash_repeats": "integer (optional)", "post_process": "enum: [wash_only, wash_and_dry, wash_and_mill]", "notes": "string (free text)"}, "description": "Alkaline treatment (nixtamalization) of corn kernels involving cooking in an alkali solution, soaking, washing (to remove pericarp and residual alkali), then optional drying and downstream milling. This is identity-bearing and alters nutrient availability, mineral content (notably calcium), and functional properties of the grain.", "expected_inputs": ["part:kernel:zea:mays"], "expected_outputs": ["part:nixtamalized_kernel", "part:nixtamal (wet masa) when ground wet"], "typical_follow_on_transforms": ["tf:dry (to produce dried nixtamalized product)", "tf:mill (to produce masa harina from dried nixtamal)"], "nutritional_and_functional_effects": {"increase": ["bioavailable_niacin", "calcium_content (if calcium source used)"], "decrease": ["mycotoxin_levels (variable)"], "qualitative_changes": ["removal_of_pericarp", "gelatinization_of_endosperm", "improved_dough_properties", "pH_increase during process"]}, "rationale": "Nixtamalization is an identity-bearing process with clear, reproducible effects on nutrient composition and functionality; it must be represented to correctly model masa, masa harina, hominy and derived foods."}], "new_parts": [{"id": "part:nixtamalized_kernel", "description": "Corn kernel after alkaline cooking and washing (nixtamalized). Wet, usually hulled; intermediate product used for wet grinding to masa or drying to make masa harina."}, {"id": "part:masa", "description": "Wet dough produced by grinding nixtamalized kernels; used fresh for tortillas and other products."}, {"id": "part:nixtamalized_flour", "aliases": ["part:masa_harina", "part:masa_flour"], "description": "Dried milled flour produced from nixtamalized kernels (commonly sold as 'masa harina'). Distinct from plain corn flour because of nixtamalization."}], "example_tpt_for_masa_harina": {"part_id": "part:nixtamalized_flour", "transforms": [{"id": "tf:nixtamalize", "params": {"substrate": "part:kernel:zea:mays", "alkali_agent": "calcium_hydroxide", "alkali_concentration_pct": 1.0, "cook_temperature_C": 95, "cook_time_min": 60, "soak_time_hr": 12, "wash_until_pH": 8, "post_process": "wash_and_dry"}}, {"id": "tf:mill", "params": {"substrate": "part:nixtamalized_kernel", "fineness": "flour"}}]}}
{"new_parts": [{"id": "part:pawpaw:mesocarp", "label": "pawpaw (Asimina triloba) — mesocarp (peeled, seeded)", "description": "Edible fruit mesocarp (pulp) after removal of skin/peel and seeds; corresponds to product described as 'peeled, seeded, raw'."}], "new_transforms": [{"id": "tf:peel", "purpose": "Remove outer skin/peel from a fruit or vegetable, producing an edible mesocarp-only part.", "params_schema": {"method": "string (e.g., 'manual', 'knife', 'peeler')", "substrate_part": "string (e.g., 'fruit_whole')", "removed_parts": "array[string] (e.g., ['peel'])"}, "notes": "Peeling removes a non-edible/edible-proximal layer that can materially change nutrient density per edible portion (fiber, micronutrients concentrated in peel for some fruits). Useful across many fruits (pawpaw, apple, mango, etc.)."}, {"id": "tf:remove_seeds", "purpose": "Remove seeds/large pits from fruit, producing de-seeded edible portion.", "params_schema": {"technique": "string (e.g., 'scooping', 'cut_and_remove')", "target": "string (e.g., 'seeds', 'pit')", "substrate_part": "string (e.g., 'fruit_whole' or 'after_peel')"}, "notes": "Seed/pit removal changes mass and may remove seed-derived fats or proteins; commonly applied to many fruits and relevant for accurate nutrient representation of 'peeled, seeded' products."}], "rationale": "Peel and seed removal are preparatory transforms that change which plant part is represented (whole fruit → mesocarp). That change can materially affect the nutrient composition reported per edible portion (peel and seeds can contain concentrated fiber, micronutrients, oils, or proteins). Multiple fruit entries would benefit from these canonical transforms (pawpaw, mango, avocado, apple, etc.). Adding tf:peel and tf:remove_seeds (and an explicit mesocarp part) will allow Tier 2 to produce correct TPTs for products described as peeled/seeded."}
{"summary": "Add identity-bearing preparation transforms for mechanical removal of peel and seeds and new prepared part(s) that use them. These transforms must adjust mass yield and composition (remove peel- or seed-specific nutrients) and be reusable across fleshy fruits/vegetables where peel/seed removal materially changes nutrient profile (pumpkins, squash, melons, cucurbits, some fruits/vegetables).", "proposed_transforms": [{"id": "tf:peel", "label": "peel (remove epidermis/pericarp)", "description": "Remove outer peel/skin from a fruit/vegetable. This is an identity-bearing preparation: it reduces total mass and removes peel-specific nutrients (fiber, pigments, some micronutrients). Should support parameters to express yield and which anatomical layers are removed.", "params_schema": {"method": "string (optional) — e.g., 'knife', 'peeler', 'blanch_peel'", "removed_layers": "array of strings (optional) — e.g., ['exocarp','epicarp','rind']", "yield_fraction": "number (0-1, optional) — fraction of original mass remaining after peeling; if absent, ontology/part mapping applies default yield", "note": "string (optional)"}, "nutritional_action": "Subtracts mass and peel-specific nutrient contributions from source part; remaining part's composition recalculated by mass-balance using yield_fraction and peel composition."}, {"id": "tf:deseed", "label": "deseed / remove seeds", "description": "Remove seeds from fruit/vegetable. Identity-bearing: seeds often contain concentrated lipids, protein, minerals and significantly change macronutrient profile when removed. Parameters allow specifying complete removal vs partial (e.g., 'scooped' vs 'retained small seeds').", "params_schema": {"method": "string (optional) — e.g., 'scoop', 'rinse', 'strain'", "seed_removal_fraction": "number (0-1, optional) — fraction of seeds removed; default 1.0 for 'seeded' notation", "yield_fraction": "number (0-1, optional) — fraction of original mass remaining after seed removal (mass after removal / original mass)", "note": "string (optional)"}, "nutritional_action": "Removes seed mass and seed-specific nutrient composition from source part; remaining tissue composition recalculated by mass-balance using seed_removal_fraction and seed composition."}], "proposed_parts": [{"id": "part:squash:pie_pumpkin:peeled:raw", "label": "Squash, pie pumpkin, peeled, raw", "derived_from": "part:squash:pie_pumpkin:raw", "applied_transforms": [{"id": "tf:peel", "params": {"yield_fraction": null}}], "note": "Prepared part representing raw pumpkin with peel removed. Yield and composition should be computed using tf:peel with default or part-specific peel composition/yield values in the ontology."}, {"id": "part:squash:pie_pumpkin:peeled_seeded:raw", "label": "Squash, pie pumpkin, peeled, seeded, raw", "derived_from": "part:squash:pie_pumpkin:raw", "applied_transforms": [{"id": "tf:peel", "params": {"yield_fraction": null}}, {"id": "tf:deseed", "params": {"seed_removal_fraction": 1.0, "yield_fraction": null}}], "note": "Prepared part representing raw pumpkin with peel and seeds removed. Both transforms are identity-bearing and must update composition via mass-balance."}], "implementation_guidance": {"defaults": "Where explicit yield_fraction or seed_removal_fraction is not provided in TPT, use part-specific default yield values stored in ontology (empirical values per species/part).", "mass_balance": "Transforms must be implemented to adjust nutrient composition by removing the removed part's composition and re-normalizing to remaining mass. Peel and seed composition entries should exist (or be derived) in the ontology.", "scope": "Apply these transforms across all fleshy-fruit/vegetable taxa where peel or seeds are removed (Cucurbita spp., Cucumis spp., some Solanaceae fruits, root/veg when applicable).", "backwards_compatibility": "Existing items currently labeled 'peeled' or 'seeded' without transforms should be remapped to the new prepared parts or have tf:peel/tf:deseed applied retroactively."}, "rationale": "Peel and seed removal are identity-bearing for many fruits/vegetables because they remove anatomical components that concentrate specific nutrients (e.g., peel: fiber, carotenoids; seeds: lipids, protein). For pie pumpkin, seed removal in particular removes a non-trivial fraction of lipids/protein; peeling removes peel-bound fiber and pigments. Without these transforms, nutrient estimates for 'peeled, seeded' products will be inaccurate. Adding canonical transforms and prepared parts allows consistent, reusable adjustments across multiple foods."}
{"summary": "Add identity-preserving preparatory transforms to record removal of peel/skin and seeds from fruits/vegetables (e.g., peeled, seeded spaghetti squash).", "proposed_transforms": [{"id": "tf:peel", "purpose": "Represent removal of outer peel/skin from a fruit or vegetable, yielding the flesh-derived part while removing part:fruit:peel as a discarded/derived part.", "params_schema": {"method": "string (optional) e.g. 'knife'|'peeler'|'blanch_peel'", "percent_removed": "number (optional) fraction of original mass removed as peel (0-1); if unknown, null", "retain_peel": "boolean (optional) whether peel is retained for further use"}, "notes": "Peel removal is identity-preserving for the edible flesh but can materially change nutrient profile (fiber, phytochemicals). A general tf:peel allows consistent handling across many taxa (apples, pears, squash, citrus, etc.)."}, {"id": "tf:remove_seeds", "purpose": "Represent removal of seeds (part:seed) from a fruit, yielding the seedless fruit flesh part and explicitly removing part:seed.", "params_schema": {"method": "string (optional) e.g. 'scoop'|'cut_out'|'strain'", "fraction_seeds_removed": "number (optional) fraction of seed mass removed (0-1); if unknown, null", "retain_seeds": "boolean (optional) whether seeds are retained for use"}, "notes": "Seed removal can be nutritionally significant for some fruits (seeds often concentrate fat/protein). Making this transform available will reduce ambiguity for many prepared foods labeled 'seeded' or 'de-seeded'."}], "proposed_parts": [{"id": "part:fruit:peel", "purpose": "The outer peel/skin of a fruit (e.g., squash skin). Useful as a removed/derived part when tf:peel is applied."}], "implementation_guidance": "These transforms are identity-preserving (they don't create new chemical products) but remove identifiable sub-parts that can materially affect nutrient composition. Implement as optional transforms applied in the Preparation stage (order ~10–30). Provide defaults for percent_removed/fraction_seeds_removed by taxon where available; otherwise allow null/unknown and propagate uncertainty in nutrient estimates."}
{"new_transform": {"id": "tf:peel", "name": "peel / skin removal", "description": "Removes the outer peel/skin layer from a plant part (root, tuber, fruit). Peeling is a preparatory transform that can remove a non-trivial fraction of mass and nutrients (notably fiber, some minerals and some vitamins concentrated in or near the skin). This transform should record method and an approximate removed-mass fraction to allow nutritional adjustments.", "params_spec": {"method": {"type": "enum", "values": ["peeler", "knife", "blanch_peel"], "description": "How the peel was removed"}, "substrate_part": {"type": "ontology_part", "values": ["part:root", "part:tuber", "part:fruit"], "description": "Biological part being peeled"}, "removed_fraction": {"type": "number", "units": "g/g", "description": "Approximate fraction of the original mass removed as peel (0-1)."}}, "example_usage": [{"part_id": "part:root", "label": "Rutabaga, peeled, raw", "transforms": [{"id": "tf:peel", "params": {"method": "peeler", "substrate_part": "part:root", "removed_fraction": 0.03}}]}], "rationale": "Peeling commonly changes nutrient composition across many plant parts (roots, tubers, fruits). Because the peel often concentrates fiber and some micronutrients, representing peeling as an explicit transform permits consistent nutritional adjustments and removes ambiguity when samples are labeled 'peeled'."}, "affected_parts_suggested": ["part:root", "part:tuber", "part:fruit"]}
{"summary": "Add/standardize concentration and reconstitution transforms and an intermediate 'concentrate' part for fruit juices.", "proposed_transforms": [{"id": "tf:evaporate", "params_schema": {"target_brix": {"type": "number", "units": "°Brix", "notes": "target soluble solids after evaporation"}, "heating_profile": {"type": "object", "fields": {"temperature_C": "number", "residence_time_s": "number"}, "notes": "optional, used to model heat-driven nutrient losses"}, "mode": {"type": "string", "enum": ["vacuum", "open_kettle", "falling_film"], "notes": "optional, impacts heat exposure"}}, "rationale": "Evaporation/concentration meaningfully alters mass-based nutrient concentrations and can cause heat-sensitive nutrient losses (e.g., vitamin C). Modeling target Brix and heating profile allows nutrition impact to be captured."}, {"id": "tf:reconstitute", "params_schema": {"target_brix": {"type": "number", "units": "°Brix", "notes": "final soluble solids target after dilution"}, "dilution_ratio": {"type": "number", "notes": "mass (or volume) of water per mass of concentrate; alternative to target_brix"}, "diluent_quality": {"type": "string", "enum": ["potable_water", "water_deaerated", "other"], "notes": "may affect shelf stability/processing"}}, "rationale": "Reconstitution changes concentration and final mass basis for nutrient values; necessary to represent 'from concentrate' products accurately."}, {"id": "part:juice:fruit_concentrate", "schema": {"parent": "part:juice:fruit", "notes": "Intermediary part representing concentrated expressed juice (used as a substrate for reconstitution)."}, "rationale": "Explicit intermediate part enables clear separation of concentration and reconstitution steps and supports provenance/nutrient-calc tracking."}], "notes": "Also recommend optional parameters to tf:pasteurize to indicate regime (e.g., UHT) and whether pasteurization is applied pre- or post-reconstitution. Because real-world sequencing can vary, keep canonical modelling convention (reconstitute -> pasteurize) but allow the model to accept either ordering with an 'ambiguous_sequence' flag."}
